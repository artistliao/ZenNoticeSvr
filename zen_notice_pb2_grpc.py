# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import zen_notice_pb2 as zen__notice__pb2


class ZenNoticeHandleStub(object):
    """
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.NoticeLine = channel.unary_unary(
                '/zen_notice.ZenNoticeHandle/NoticeLine',
                request_serializer=zen__notice__pb2.NoticeLineReq.SerializeToString,
                response_deserializer=zen__notice__pb2.NoticeLineRsp.FromString,
                )
        self.NoticeDraw = channel.unary_unary(
                '/zen_notice.ZenNoticeHandle/NoticeDraw',
                request_serializer=zen__notice__pb2.NoticeDrawReq.SerializeToString,
                response_deserializer=zen__notice__pb2.NoticeDrawRsp.FromString,
                )
        self.NoticeTrade = channel.unary_unary(
                '/zen_notice.ZenNoticeHandle/NoticeTrade',
                request_serializer=zen__notice__pb2.NoticeTradeReq.SerializeToString,
                response_deserializer=zen__notice__pb2.NoticeTradeRsp.FromString,
                )


class ZenNoticeHandleServicer(object):
    """
    """

    def NoticeLine(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NoticeDraw(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NoticeTrade(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ZenNoticeHandleServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'NoticeLine': grpc.unary_unary_rpc_method_handler(
                    servicer.NoticeLine,
                    request_deserializer=zen__notice__pb2.NoticeLineReq.FromString,
                    response_serializer=zen__notice__pb2.NoticeLineRsp.SerializeToString,
            ),
            'NoticeDraw': grpc.unary_unary_rpc_method_handler(
                    servicer.NoticeDraw,
                    request_deserializer=zen__notice__pb2.NoticeDrawReq.FromString,
                    response_serializer=zen__notice__pb2.NoticeDrawRsp.SerializeToString,
            ),
            'NoticeTrade': grpc.unary_unary_rpc_method_handler(
                    servicer.NoticeTrade,
                    request_deserializer=zen__notice__pb2.NoticeTradeReq.FromString,
                    response_serializer=zen__notice__pb2.NoticeTradeRsp.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'zen_notice.ZenNoticeHandle', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ZenNoticeHandle(object):
    """
    """

    @staticmethod
    def NoticeLine(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/zen_notice.ZenNoticeHandle/NoticeLine',
            zen__notice__pb2.NoticeLineReq.SerializeToString,
            zen__notice__pb2.NoticeLineRsp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NoticeDraw(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/zen_notice.ZenNoticeHandle/NoticeDraw',
            zen__notice__pb2.NoticeDrawReq.SerializeToString,
            zen__notice__pb2.NoticeDrawRsp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NoticeTrade(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/zen_notice.ZenNoticeHandle/NoticeTrade',
            zen__notice__pb2.NoticeTradeReq.SerializeToString,
            zen__notice__pb2.NoticeTradeRsp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
